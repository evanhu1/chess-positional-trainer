{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","fen","score","hideScore","picked","fetch","process","then","response","json","jsonData","setState","games","random","getRandomInt","length","game","catch","error","console","max","Math","floor","choice","tempScore","parseInt","this","correct","log","className","calcWidth","screenWidth","screenHeight","min","position","draggable","orientation","split","type","onClick","evaluateChoice","id","setTimeout","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"wRAyEeA,E,kDApEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACCC,MAAQ,CAACC,IAAK,GAAIC,MAAO,GAAIC,WAAW,EAAMC,QAAQ,GAF5C,E,gEAIE,IAAD,OAClB,OAAOC,MAAMC,wCACZC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC1BF,MAAK,SAACG,GACL,EAAKC,SAAS,CAACC,MAAOF,EAASE,QAC/B,IAAIC,EAAS,EAAKC,aAAa,EAAKd,MAAMY,MAAMG,QAChD,EAAKJ,SAAS,CAACV,IAAKS,EAASE,MAAMC,GAAQZ,IAAKC,MAAMQ,EAASE,MAAMC,GAAQX,MAAOc,KAAKH,OAE1FI,OAAM,SAACC,GACNC,QAAQD,MAAMA,Q,mCAGPE,GACX,OAAOC,KAAKC,MAAMD,KAAKR,SAAWQ,KAAKC,MAAMF,M,qCAEhCG,GACb,IAAIC,EAAYC,SAASC,KAAK1B,MAAME,OAAO,IASvCqB,KAPAC,GAAa,IACJ,EACFA,EAAY,GACZ,EAEA,GAGTE,KAAKf,SAAS,CAACP,QAAQ,EAAMuB,SAAQ,IAGrCD,KAAKf,SAAS,CAACP,QAAQ,EAAMuB,SAAS,M,+BAGhC,IAAD,OAEP,OADAR,QAAQS,IAAIF,KAAK1B,MAAMC,KAErB,oCACA,wDACA,4BAAK,IAAMyB,KAAK1B,MAAMgB,MACtB,yBAAKa,UAAU,SACb,kBAAC,IAAD,CAAYC,UAAW,gBAAGC,EAAH,EAAGA,YAAH,EAAgBC,aAAhB,OAAkCX,KAAKY,IAAI,GAAIF,EAAa,MAAMG,SAAUR,KAAK1B,MAAMC,IAAKkC,WAAW,EAAOC,YAAgD,MAAjCV,KAAK1B,MAAMC,IAAIoC,MAAM,KAAK,GAAa,QAAU,WAGtMX,KAAK1B,MAAMI,OAAS,KACrB,oCACA,sDACA,yBAAKyB,UAAU,WACb,4BAAQA,UAAU,cAAcS,KAAK,SAASC,QAAS,WAAO,EAAKC,eAAe,KAAlF,qBACA,4BAAQX,UAAU,cAAcS,KAAK,SAASC,QAAS,WAAO,EAAKC,eAAe,KAAlF,yBACA,4BAAQX,UAAU,cAAcS,KAAK,SAASC,QAAS,WAAO,EAAKC,gBAAgB,KAAnF,uBAGDd,KAAK1B,MAAMI,OACZ,yBAAKqC,GAAG,UACN,4BAAKf,KAAK1B,MAAM2B,QAAU,WAAa,aACvC,uBAAGc,GAAG,SAAS,yBAA2BhB,SAASC,KAAK1B,MAAME,OAAO,KACrE,4BAAQoC,KAAK,SAASC,QAAS,WAAO,IAAI1B,EAAS,EAAKC,aAAa,EAAKd,MAAMY,MAAMG,QACpF2B,WAAW,EAAK/B,SAAS,CAACP,QAAO,EAAOD,WAAW,EAAMF,IAAK,EAAKD,MAAMY,MAAMC,GAAQZ,IAAKC,MAAM,EAAKF,MAAMY,MAAMC,GAAQX,MAAOc,KAAKH,IAAU,OADnJ,QAEA,2BAAIa,KAAK1B,MAAMC,MACR,U,GA/DG0C,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlD,MAAK,SAAAmD,GACJA,EAAaC,gBAEd1C,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM0C,a","file":"static/js/main.b13c2244.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Chessboard from 'chessboardjsx';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n      this.state = {fen: \"\", score: \"\", hideScore: true, picked: false}\n  }\n  componentDidMount() {\n    return fetch(process.env.PUBLIC_URL + \"/games.json\")\n    .then((response) => response.json())\n      .then((jsonData) => {\n        this.setState({games: jsonData.games})\n        let random = this.getRandomInt(this.state.games.length)\n        this.setState({fen: jsonData.games[random].fen, score:jsonData.games[random].score, game:random});\n      })\n      .catch((error) => {\n        console.error(error)\n      })\n  }\n  getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n  }\n  evaluateChoice(choice) {\n    let tempScore = parseInt(this.state.score)/100\n    var answer\n    if (tempScore < -0.5) {\n       answer = -1\n    } else if (tempScore > 0.5) {\n      answer = 1\n    } else {\n      answer = 0\n    }\n    if (choice === answer) {\n      this.setState({picked: true, correct:true})\n    }\n    else {\n      this.setState({picked: true, correct: false})\n    }\n  }\n  render() {\n    console.log(this.state.fen)\n    return (\n      <>\n      <h1>CHESS POSITIONAL TRAINER</h1>\n      <h2>{\"#\" + this.state.game}</h2>\n      <div className=\"board\">\n        <Chessboard calcWidth={({ screenWidth, screenHeight}) => Math.min(0.6*screenWidth, 450)} position={this.state.fen} draggable={false} orientation = {this.state.fen.split(\" \")[1] === 'w' ? 'white' : 'black'}/>\n      </div>\n      \n      {this.state.picked ? null :\n      <>\n      <h2>Evaluate the position:</h2>\n      <div className=\"buttons\">\n        <button className=\"evalButtons\" type=\"button\" onClick={() => {this.evaluateChoice(1)}}>White is stronger</button>\n        <button className=\"evalButtons\" type=\"button\" onClick={() => {this.evaluateChoice(0)}}>The position is equal</button>\n        <button className=\"evalButtons\" type=\"button\" onClick={() => {this.evaluateChoice(-1)}}>Black is stronger</button>\n      </div>\n      </>}\n      {this.state.picked ? \n      <div id=\"bottom\">\n        <h2>{this.state.correct ? \"Correct!\" : \"Incorrect\"}</h2>\n        <p id=\"score\">{\"Stockfish evaluation: \" + parseInt(this.state.score)/100}</p>\n        <button type=\"button\" onClick={() => {let random = this.getRandomInt(this.state.games.length)\n          setTimeout(this.setState({picked:false, hideScore: true, fen: this.state.games[random].fen, score:this.state.games[random].score, game:random}), 100)}}>Next</button>\n        <p>{this.state.fen}</p>\n      </div> : null}\n      </>\n      );\n  }\n  \n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}